# 1 "bin/lexer.mll"
  
  open Parser   (* Menhir parser 接口 *)

# 6 "bin/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\228\255\229\255\230\255\231\255\232\255\233\255\234\255\
    \235\255\236\255\238\255\239\255\240\255\002\000\001\000\002\000\
    \003\000\030\000\031\000\079\000\154\000\095\000\255\255\253\255\
    \001\000\254\255\250\255\248\255\247\255\246\255\243\255\242\255\
    \004\000\254\255\011\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\027\000\027\000\011\000\
    \010\000\014\000\006\000\004\000\003\000\018\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\001\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\022\000\025\000\000\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\017\000\000\000\000\000\000\000\009\000\014\000\030\000\
    \008\000\007\000\010\000\012\000\003\000\011\000\034\000\021\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\035\000\004\000\016\000\018\000\015\000\029\000\
    \028\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\027\000\026\000\000\000\000\000\019\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\006\000\013\000\005\000\031\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\023\000\000\000\000\000\000\000\000\000\024\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\019\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\000\000\000\000\014\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\034\000\000\000\000\000\000\000\000\000\015\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\018\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\013\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\021\000\255\255\255\255\255\255\255\255\021\000\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\255\255\255\255\255\255\255\255\019\000\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\024\000\255\255\255\255\032\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 6 "bin/lexer.mll"
                            ( token lexbuf )
# 153 "bin/lexer.ml"

  | 1 ->
# 7 "bin/lexer.mll"
                            ( token lexbuf )
# 158 "bin/lexer.ml"

  | 2 ->
# 8 "bin/lexer.mll"
                            ( comment lexbuf; token lexbuf )
# 163 "bin/lexer.ml"

  | 3 ->
let
# 9 "bin/lexer.mll"
                num
# 169 "bin/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 9 "bin/lexer.mll"
                            ( INT (int_of_string num) )
# 173 "bin/lexer.ml"

  | 4 ->
let
# 10 "bin/lexer.mll"
                                                         id
# 179 "bin/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 10 "bin/lexer.mll"
                                                            (
    match id with
    | "int"      -> INT_KW
    | "void"     -> VOID_KW
    | "if"       -> IF
    | "else"     -> ELSE
    | "while"    -> WHILE
    | "break"    -> BREAK
    | "continue" -> CONTINUE
    | "return"   -> RETURN
    | _          -> ID id
  )
# 194 "bin/lexer.ml"

  | 5 ->
# 22 "bin/lexer.mll"
                            ( EQ )
# 199 "bin/lexer.ml"

  | 6 ->
# 23 "bin/lexer.mll"
                            ( ASSIGN )
# 204 "bin/lexer.ml"

  | 7 ->
# 24 "bin/lexer.mll"
                            ( NE )
# 209 "bin/lexer.ml"

  | 8 ->
# 25 "bin/lexer.mll"
                            ( LE )
# 214 "bin/lexer.ml"

  | 9 ->
# 26 "bin/lexer.mll"
                            ( GE )
# 219 "bin/lexer.ml"

  | 10 ->
# 27 "bin/lexer.mll"
                            ( LT )
# 224 "bin/lexer.ml"

  | 11 ->
# 28 "bin/lexer.mll"
                            ( GT )
# 229 "bin/lexer.ml"

  | 12 ->
# 29 "bin/lexer.mll"
                            ( ANDAND )
# 234 "bin/lexer.ml"

  | 13 ->
# 30 "bin/lexer.mll"
                            ( OROR )
# 239 "bin/lexer.ml"

  | 14 ->
# 31 "bin/lexer.mll"
                            ( BANG )
# 244 "bin/lexer.ml"

  | 15 ->
# 32 "bin/lexer.mll"
                            ( PLUS )
# 249 "bin/lexer.ml"

  | 16 ->
# 33 "bin/lexer.mll"
                            ( MINUS )
# 254 "bin/lexer.ml"

  | 17 ->
# 34 "bin/lexer.mll"
                            ( STAR )
# 259 "bin/lexer.ml"

  | 18 ->
# 35 "bin/lexer.mll"
                            ( SLASH )
# 264 "bin/lexer.ml"

  | 19 ->
# 36 "bin/lexer.mll"
                            ( PERCENT )
# 269 "bin/lexer.ml"

  | 20 ->
# 37 "bin/lexer.mll"
                            ( LPAREN )
# 274 "bin/lexer.ml"

  | 21 ->
# 38 "bin/lexer.mll"
                            ( RPAREN )
# 279 "bin/lexer.ml"

  | 22 ->
# 39 "bin/lexer.mll"
                            ( LBRACE )
# 284 "bin/lexer.ml"

  | 23 ->
# 40 "bin/lexer.mll"
                            ( RBRACE )
# 289 "bin/lexer.ml"

  | 24 ->
# 41 "bin/lexer.mll"
                            ( SEMI )
# 294 "bin/lexer.ml"

  | 25 ->
# 42 "bin/lexer.mll"
                            ( COMMA )
# 299 "bin/lexer.ml"

  | 26 ->
# 43 "bin/lexer.mll"
                            ( EOF )
# 304 "bin/lexer.ml"

  | 27 ->
# 44 "bin/lexer.mll"
                            ( failwith "Unexpected character" )
# 309 "bin/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 32
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "bin/lexer.mll"
                            ( () )
# 321 "bin/lexer.ml"

  | 1 ->
# 48 "bin/lexer.mll"
                            ( comment lexbuf )
# 326 "bin/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

