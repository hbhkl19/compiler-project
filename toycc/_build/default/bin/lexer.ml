# 3 "bin/lexer.mll"
 
open Parser

let keywords = Hashtbl.create 10
let _ =
  List.iter (fun (kw, tok) -> Hashtbl.add keywords kw tok)
    [ "int", INT; "void", VOID; "if", IF; "else", ELSE; 
      "while", WHILE; "break", BREAK; "continue", CONTINUE; 
      "return", RETURN ]

let is_digit = function '0'..'9' -> true | _ -> false
let is_alpha = function 'a'..'z' | 'A'..'Z' | '_' -> true | _ -> false
let is_alphanum = function 'a'..'z' | 'A'..'Z' | '0'..'9' | '_' -> true | _ -> false

# 17 "bin/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\227\255\228\255\078\000\153\000\231\255\012\000\001\000\
    \002\000\003\000\030\000\241\255\242\255\243\255\244\255\245\255\
    \031\000\247\255\249\255\250\255\251\255\095\000\254\255\255\255\
    \252\255\001\000\253\255\238\255\239\255\235\255\234\255\233\255\
    \232\255\004\000\252\255\253\255\254\255\011\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\026\000\025\000\255\255\028\000\028\000\
    \019\000\018\000\015\000\255\255\255\255\255\255\255\255\255\255\
    \009\000\255\255\255\255\255\255\255\255\007\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\002\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\035\000\000\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\022\000\026\000\000\000\023\000\036\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\016\000\000\000\000\000\000\000\017\000\007\000\031\000\
    \015\000\014\000\018\000\020\000\005\000\019\000\037\000\021\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\038\000\011\000\009\000\010\000\008\000\030\000\
    \029\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\028\000\027\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\013\000\006\000\012\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \032\000\024\000\000\000\000\000\000\000\000\000\025\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\000\000\000\000\034\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\025\000\255\255\000\000\033\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\000\000\000\000\007\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\037\000\000\000\000\000\000\000\000\000\008\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\010\000\016\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \006\000\021\000\255\255\255\255\255\255\255\255\021\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\255\255\255\255\255\255\255\003\000\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\025\000\255\255\255\255\033\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 19 "bin/lexer.mll"
                         ( token lexbuf )
# 164 "bin/lexer.ml"

  | 1 ->
# 20 "bin/lexer.mll"
                        ( Lexing.new_line lexbuf; token lexbuf )
# 169 "bin/lexer.ml"

  | 2 ->
# 21 "bin/lexer.mll"
                        ( Lexing.new_line lexbuf; token lexbuf )
# 174 "bin/lexer.ml"

  | 3 ->
# 22 "bin/lexer.mll"
                        ( comment lexbuf )
# 179 "bin/lexer.ml"

  | 4 ->
# 23 "bin/lexer.mll"
                        ( PLUS )
# 184 "bin/lexer.ml"

  | 5 ->
# 24 "bin/lexer.mll"
                        ( MINUS )
# 189 "bin/lexer.ml"

  | 6 ->
# 25 "bin/lexer.mll"
                        ( TIMES )
# 194 "bin/lexer.ml"

  | 7 ->
# 26 "bin/lexer.mll"
                        ( DIVIDE )
# 199 "bin/lexer.ml"

  | 8 ->
# 27 "bin/lexer.mll"
                        ( MOD )
# 204 "bin/lexer.ml"

  | 9 ->
# 28 "bin/lexer.mll"
                        ( NOT )
# 209 "bin/lexer.ml"

  | 10 ->
# 29 "bin/lexer.mll"
                        ( LPAREN )
# 214 "bin/lexer.ml"

  | 11 ->
# 30 "bin/lexer.mll"
                        ( RPAREN )
# 219 "bin/lexer.ml"

  | 12 ->
# 31 "bin/lexer.mll"
                        ( LBRACE )
# 224 "bin/lexer.ml"

  | 13 ->
# 32 "bin/lexer.mll"
                        ( RBRACE )
# 229 "bin/lexer.ml"

  | 14 ->
# 33 "bin/lexer.mll"
                        ( SEMI )
# 234 "bin/lexer.ml"

  | 15 ->
# 34 "bin/lexer.mll"
                        ( ASSIGN )
# 239 "bin/lexer.ml"

  | 16 ->
# 35 "bin/lexer.mll"
                        ( EQ )
# 244 "bin/lexer.ml"

  | 17 ->
# 36 "bin/lexer.mll"
                        ( NEQ )
# 249 "bin/lexer.ml"

  | 18 ->
# 37 "bin/lexer.mll"
                        ( LT )
# 254 "bin/lexer.ml"

  | 19 ->
# 38 "bin/lexer.mll"
                        ( GT )
# 259 "bin/lexer.ml"

  | 20 ->
# 39 "bin/lexer.mll"
                        ( LEQ )
# 264 "bin/lexer.ml"

  | 21 ->
# 40 "bin/lexer.mll"
                        ( GEQ )
# 269 "bin/lexer.ml"

  | 22 ->
# 41 "bin/lexer.mll"
                        ( AND )
# 274 "bin/lexer.ml"

  | 23 ->
# 42 "bin/lexer.mll"
                        ( OR )
# 279 "bin/lexer.ml"

  | 24 ->
# 43 "bin/lexer.mll"
                        ( COMMA )
# 284 "bin/lexer.ml"

  | 25 ->
let
# 44 "bin/lexer.mll"
                  num
# 290 "bin/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 44 "bin/lexer.mll"
                        ( NUMBER (int_of_string num) )
# 294 "bin/lexer.ml"

  | 26 ->
let
# 45 "bin/lexer.mll"
                                                            id
# 300 "bin/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 46 "bin/lexer.mll"
    ( try Hashtbl.find keywords id with Not_found -> ID id )
# 304 "bin/lexer.ml"

  | 27 ->
# 47 "bin/lexer.mll"
                        ( EOF )
# 309 "bin/lexer.ml"

  | 28 ->
let
# 48 "bin/lexer.mll"
         char
# 315 "bin/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 48 "bin/lexer.mll"
                        ( failwith ("Illegal character: " ^ Char.escaped char) )
# 319 "bin/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 33
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 51 "bin/lexer.mll"
                        ( token lexbuf )
# 331 "bin/lexer.ml"

  | 1 ->
# 52 "bin/lexer.mll"
                        ( Lexing.new_line lexbuf; comment lexbuf )
# 336 "bin/lexer.ml"

  | 2 ->
# 53 "bin/lexer.mll"
                        ( comment lexbuf )
# 341 "bin/lexer.ml"

  | 3 ->
# 54 "bin/lexer.mll"
                        ( failwith "Unclosed comment" )
# 346 "bin/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

